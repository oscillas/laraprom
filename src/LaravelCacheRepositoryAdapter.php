<?php

namespace Oscillas\Laraprom;

use Illuminate\Contracts\Cache\Repository;
use Prometheus\Storage\Adapter;
use Prometheus\Storage\InMemory;

class LaravelCacheRepositoryAdapter extends InMemory implements Adapter
{
    const string CACHE_KEY = 'LARAPROM_PROMETHEUS_METRICS';

    public function __construct(protected Repository $cache)
    {
    }

    public function updateGauge(array $data): void
    {
        $this->loadFromCache();
        parent::updateGauge($data); // TODO: Change the autogenerated stub
        $this->saveToCache();
    }

    public function updateCounter(array $data): void
    {
        $this->loadFromCache();
        parent::updateCounter($data); // TODO: Change the autogenerated stub
        $this->saveToCache();
    }

    public function updateHistogram(array $data): void
    {
        $this->loadFromCache();
        parent::updateHistogram($data); // TODO: Change the autogenerated stub
        $this->saveToCache();
    }

    public function updateSummary(array $data): void
    {
        $this->loadFromCache();
        parent::updateSummary($data); // TODO: Change the autogenerated stub
        $this->saveToCache();
    }

    public function collect(bool $sortMetrics = true): array
    {
        $this->loadFromCache();
        return parent::collect($sortMetrics); // TODO: Change the autogenerated stub
    }

    protected function loadFromCache(): void
    {
        $data = $this->cache->get(self::CACHE_KEY);
        if (!$data) {
            return;
        }

        $this->gauges = $data['gauges'];
        $this->counters = $data['counters'];
        $this->histograms = $data['histograms'];
        $this->summaries = $data['summaries'];
    }

    protected function saveToCache(): void
    {
        $this->cache->put(self::CACHE_KEY, [
            'gauges' => $this->gauges,
            'counters' => $this->counters,
            'histograms' => $this->histograms,
            'summaries' => $this->summaries,
        ]);
    }
}